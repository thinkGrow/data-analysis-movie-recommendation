---
title: 'ETC1010-5510: Introduction to Data Analysis Assignment 2'
author: "MT"
output: html
---

```{r setup, include = TRUE, echo = FALSE, cache = FALSE}

# Please do not touch this R code chunk!
knitr::opts_chunk$set(
  echo = TRUE,
  eval = TRUE,
  out.width = "70%",
  fig.width = 8, 
  fig.height = 6,
  fig.retina = 3)
set.seed(6)
```

## Load all the libraries that you need here

```{r libraries, eval = TRUE, message = FALSE, warning = FALSE}
library(tidyverse)
```

## Read in the data

The Movielens data consists of 2 csv files, let's start by reading them into R.

```{r, message=FALSE}
data.movies = read_csv("movies.csv")
data.ratings = read_csv("ratings.csv")
```


The file `data.movies` contains 3 variables with information about every movie:

- `movieId`: a positive consecutive integer 1, 2, ..., that uniquely identifies the movie.
- `title`: a text string with the name of the movie as well as year in parenthesis.
- `genres`: a text string with the movie genre(s), multiple genres are separated with the pipe `|` symbol.

The first few rows of this dataset looks like:
```{r}
head(data.movies)
```

The file `data.ratings` contains 3 variables that record what rating a user gave for a particular movie:

- `userId`: a positive consecutive integer that uniquely identifies the user.
- `movieId`: a positive consecutive integer that uniquely identifies the movie.
- `rating`: A numeric value that ranges between 0.5 to 5 recording the rating.

In this data set, the pair (`userId`, `movieId`) uniquely identifies the rating the user with a given id gave to a specific movie.

The first few rows of this dataset looks like   :
```{r}
head(data.ratings)
```

## Question 1  
How many movies are there in the `data.movies` data set? **(1pt)**.

```{r}
nrow(data.movies)
```



## Question 2
How many unique movies are there in the `data.ratings` file? **(1pt)**. (HINT: look at number of unique values of `movieId`).

```{r}
n_distinct(data.ratings$movieId)
```



## Question 3
Based on the two previous answers, we can infer that the file `data.ratings` does not record ratings for every single movie in `data.movies`. How many movies listed in `data.movies` does not have a rating recorded? **(1pt)**

There are 0 movies listed in data.movies without a rating recorded.


## Question 4
The variable `genres` in `data.movies` contains information on many genres. Let's simplify things and choose the first entry in this string as the "main" genre.

Use the `separate` command to create a new column in `data.movies` called `main.genre`, and print the first rows of this data frame using `head()`. Hint: you can set the `sep` argument to `separate` to `"\\|"` and the `extra` argument to `"drop"`. **(1pt)**

```{r}
# data.movies =
  # data.movies %>%
  # separate(genres, into =..., sep = ..., extra = "drop")
data.movies = data.movies %>%
  separate(genres, into = c("main.genre"), sep = "\\|", extra = "drop")

head(data.movies)

```


## Question 5
What are the most 3 most common main genres in the `data.movies` dataset? **(1pt)**

```{r}
data.movies %>%
  count(main.genre, sort = TRUE) %>%
  slice_head(n = 3)
```




## Question 6
In the variable `title` it seems like the year is placed at the end in parenthesis, let's try to find what year the oldest movie was made. We can use the `str_extract` function to pick out the "(YYYY)" part of the title, then `str_replace_all` to remove the parenthesis, then convert to integers. (Note: if some titles don't follow the "(1991)" format at the end, we'll see `NA` values in some entries, we can ignore these here). What year was the oldest movie made? **(2pts)**            

```{r}
year.parens = str_extract(data.movies$title, "\\(\\d{4}\\)")
year = as.integer(str_replace_all(year.parens, "[()]", ""))
min(year, na.rm = TRUE)
```



## Question 7
Using the answer above, what is the name and main genre of the oldest movie(s)? **(2pts)**

```{r}
# Find the row number(s) for the oldest year
year.index = which(year == 1902)  

# Display the corresponding rows from data.movies
data.movies[year.index, c("title", "main.genre")]

```


## Question 8

Your team lead is interested in average ratings. Before proceeding, she recommends that you restrict your data set to movies that have been rated by at least 25 users. Filter the `data.ratings` data frame to contain only movies that have been rated by at least (>=) 25 users. **(2pts)**

```{r}
data.ratings = data.ratings %>%
  group_by(movieId) %>%
  mutate(num.ratings = n()) %>%
  filter(num.ratings >= 25)
```


## Question 9

How many unique movies are left in the ratings data set now? **(1pt)**

```{r}
n_distinct(data.ratings$movieId)
```

The distinct movies have reduced to 1050 from 9724 after filtering for movies with atleast 25 ratings.

## Question 10

Create a new data frame called `ratings` that have columns: `movieId`: the id of the movie, `avg.rating`: the average `rating`, `sd.rating`: the standard deviation of `rating`. Print the first 6 rows of this data. **(2pts)**

```{r}
ratings = data.ratings %>%
  group_by(movieId) %>%
  summarise(
    avg.rating = mean(rating),
    sd.rating = sd(rating)
  )

head(ratings)
```



## Question 11

Before looking closer at ratings, it is useful to add some information from the `data.movies` data frame. Do a left join, overwriting the `ratings` data frame, where the left hand side is `ratings`, the right and side is `data.movies[c("movieId", "title", "main.genre")]` and the merge key is `movieId`. Print the first 6 rows. **(2pts)**

```{r}
ratings = left_join(
  ratings,
  data.movies[c("movieId", "title", "main.genre")],
  by = "movieId"
)

head(ratings)

```


## Question 12

What are the names of the highest and lowest rated movie? **(1pt)**


```{r}

# Highest rated movie
highest = ratings %>%
  arrange(desc(avg.rating)) %>%
  slice(1)

cat("Highest rated movie: \n\n")


# Lowest rated movie
lowest = ratings %>%
  arrange(avg.rating) %>%
  slice(1)

cat("Lowest rated movie:")
print(lowest %>% select(title, avg.rating))
```


## Question 13

The variable `sd.rating` can be seen as a measure of how dispersed the viewer's opinion of a movie is. Which movie has the least dispersion in ratings? Hint: if you did the steps correctly, you should find a movie where the plot centers around the famous "Watergate scandal". **(1pt)**

```{r}
ratings %>%
  arrange(sd.rating) %>%
  slice(1) %>%
  select(title, sd.rating)
```


## Question 14

"Totoro", "Princess Mononoke", and "Spirited Away" are famous movies by the Japanese animator Hayao Miyazaki. What is the average rating for these 3 movies? **(2pts)**

Hint: the function `grep(pattern, x)` returns indicies in the vector `x` that matches the strings in `pattern`. With the pattern `"Totoro|Mononoke|Spirited"` and `x` `"ratings$title"` you could search for the indices for these 3 movies.

```{r}
# Find indices of the 3 movies
miyazaki_index = grep("Totoro|Mononoke|Spirited", ratings$title)

# Check which titles matched
ratings$title[miyazaki_index]

# Calculate their average rating
mean(ratings$avg.rating[miyazaki_index])
```



## Question 15

Your team lead is interesting in using this data to build movie recommendations. You told her about the K-means clustering algorithm, and she suggests a way you could try it out on the ratings dataset.

The current `data.ratings` data contains ratings by 610 users for 1 051 movies. We can represent this data as a 610 x 1051 dimensional matrix where entry (i, j) contains user i's `rating` for the j'th movie. If a user hasn't rated a movie, we can set the entry to 0. 

The idea is that this matrix can be used for clustering: each user (row) is described by a high-dimensional vector, their 1051-dimensional vectors of ratings. The idea is that users that are "similar" in this vector space, may also share similar movie taste.

We start by transforming our data into said format, we do this using `pivot_wider`. Complete the skeleton below where we create a new data frame `ratings.wide` that follows the above format. **(2pts)**

```{r}
dim(ratings)
```


```{r}
ratings.wide = data.ratings %>%
  select(userId, movieId, rating) %>%
  pivot_wider(
    names_from = movieId,
    values_from = rating,
    values_fill = list(rating = 0)
  )

dim(ratings.wide)

```


## Question 16

Your research lead suggest trying out K-means with 5 centers. Run the `kmeans` command on `X` where `X = as.matrix(ratings.wide[, -1])`. **(1pt)**

```{r}
set.seed(123) # NOTE: don't remove this.
X = as.matrix(ratings.wide[, -1])  # remove userId column
res = kmeans(X, centers = 5)
```

## Question 17

The `res$cluster` output from the above result tells us which cluster a user (id 1 to 610) belongs to. For example, if you ran the above code correctly, the user with id 496 belongs to cluster number 2.

Your team lead says we can try to use these clusters for movie recommendations: instead of recommending movies that are ranked high, we recommend movies that are ranked high, _but_ conditional on cluster. Particularly, for all clusters 1 to 5, we can calculate average ratings for all the movies. Then, based on which cluster a user belongs to, we will recommend them highly ranked movies in that cluster that they have previously not seen.

To assess this strategy, your team lead suggest that you show her what the highest ranked movies in each cluster are.

Start by adding a column called `cluster` to the `data.ratings` data set. **(2pts)**

```{r}
# Create a data frame mapping userId to cluster number
cluster.data = tibble(userId = ratings.wide$userId, cluster = res$cluster)

# Merge this with data.ratings based on userId
data.ratings = left_join(
  data.ratings,
  cluster.data,
  by = "userId"
)

```


## Question 18

Show the name of the top-3 rated movies for each cluster 1 to 5. HINT: You should see "My Fair Lady (1964)" somewhere in cluster 3's top, and "Intouchables (2011)" somewhere in cluster 5's top. **(6pts)**

```{r}
top_movies_by_cluster = data.ratings %>%
  group_by(cluster, movieId) %>%
  summarise(avg.rating = mean(rating), .groups = "drop") %>%
  left_join(data.movies[, c("movieId", "title")], by = "movieId") %>%
  arrange(cluster, desc(avg.rating)) %>%
  group_by(cluster) %>%
  slice_head(n = 3)

top_movies_by_cluster

```


## Question 19
In this question, you are essentially building your very own "simple" movie recommendation system. For the user with id 414, recommend the top 5 movies according to the average rating in their cluster. **(8pts)**

HINT: To answer this, you need to:

- Find which cluster user 414 belongs to

- Calculate average movie ratings by cluster

- Find out which movies this user have already watched

- Recommend the 5 highest rated movies in the cluster the user belongs to that the user have not already watched


